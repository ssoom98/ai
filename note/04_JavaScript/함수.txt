#함수

#함수 표현식 - var functionVar = function() { }; 
#화살표 함수 - var functionVar = () => {}; 
#선언적 함수 - function 함수명 ( ) { 함수 선언식
   }
#웹은 script 태그 내부의 내용을 읽기전에 선언적 함수부터 읽는다.
또한 함수를 재정의 하면 기본의 함수는 없어지고, 재정의한 함수를 따른다

#매개변수와 리턴값

function 함수이름(매개변수, 매개변수, 매개변수) {
	//함수 코드
	return 리턴값;
}
선언된 매개변수보다 선언값이 적거나 많은 경우 = undefined

매개변수가 2개 이상일때는 매개변수로 배열을 만든다
 var arr1 = [273, 2, 3 ,'Hello'];
 var arr2 = Array(273, 2, 3,'Hello');

#가변인자 함수
매개변수의 갯수에 따라 다른 기능을 하는 함수. 화살표함수에서는 불가
        // 내장함수 array()
#리턴값 -  return 리턴할 값

#내부 함수 - 함수 내부에 선언하는 함수*j Query는 대부분 선언적 함수를 내부함수로 작성하고 있다.

#자기호출함수
(fuction(){ … })(); //다른 개발자에게 영향을 주지 않게 함수를 생성하자마자 호출하는 경우

#콜백함수 -자바스크립트에서는 함수도 하나의 자료형이므로 매개변수에 넣을 수 있다. 매개변수에 넣어 전달된 함수를 콜백함수라 한다

#함수를 리턴하는 함수 -함수가 자료형이므로 매개변수로도 전달할 수 있지만 함수를 리턴하는 함수도 만들 수 있다. 특정함수를 여러 번 수행하거나 이벤트 처리를 할 때 필요. 리턴하는 함수를 쓰는 가장 큰 이유는 클러저 때문

#클로저 - 리턴된 함수

#타이머 함수
 ※ setTimeout(function, millisecond) ; 일정시간 후 함수를 한번 실행 
 ※ setInterval(function, millisecond) ; 일정시간마다 함수를 반복해서 실행
 ※ clearTimeout(id) ; setTimeout 중지
 ※ clearInterval(id); setInterval 중지




