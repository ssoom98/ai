0910-11강

1. 예외처리(Exception)
외부 환경요인 등에 의해서 문제가 발생한다. 발생될 만한 곳을 예상하여 사전에 프로그래밍을 하는 행위

2. 예외처리의 필요성
어느 한부분 예외가 발생하더라도 계속해서 프로그램이 동작될 수 있도록 하는 것이 목적
문제가 하나 발생되었다고 그 프로세스가 완전히 정지되어 시스템을 재가동하기 전까지 구동을 못하여 많은 손실이 발생

3. 예외처리 문법(try ~ catch)

	try {
	    try블럭 ; 익셉션이 발생할 가능성이 있는 명령문들(문제가 발생할 수 있는 로직을 기술)

	}catch(익셉션타입 익셉션변수) {
	    그 익셉션을 처리하는 명령문(try블록안에서 문제가 발생했을 때 대처방안 기술);

	} finally {
	    익셉션 발생 여부와 상관없이 맨 마지막에 실행할 명령문;
	}
<catch문에 예외처리를 여러 개 가능>
	try {
	    try블럭 ; 익셉션이 발생할 가능성이 있는 명령문들
	}catch(ArrayIndexOutOfBoundsException a) {
	    ArrayIndexOutOfBounds 익셉션을 처리하는 명령문
	} catch(NumberFormatException n) {
	    NumberFormat 익셉션을 처리하는 명령문
	} catch(Exception e) {
	    그 외 익셉션을 처리하는 명령문
	} finally {
	    익셉션 발생 여부와 상관없이 맨 마지막에 실행할 명령
	}
4. 예외처리 문법(throws)
throws의 경우에는 나를 호출한(실행시키는) 쪽으로 예외를 던져버리는 방식 입니다.

예외처리는 보험과 같은 것으로 예외가 발생 했을 때 프로세스가 죽지 않게 예외처리를 자체적으로 처리할 수 있고,
내가 처리 안하고 나를 호출한 곳으로 throws하여 처리